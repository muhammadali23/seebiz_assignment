
// varible names legal or illegal

// a variable name can't contain space.
// first charachter is not a number.
// you can use letter, underscore(-), dollarSign in variable.
// reserved keyword are not allowed as variable name like var, for, eg.


//illegal

// var varial;
// let _varildata;
// // const abc = 123;

// var camelCase = 'abc'
// var camelCase = 'xyz'

// console.log(camelCase)



// varial = 45;
// varildata = "nothing";




// Let and const keywords
// Primitive data types (numbers, strings, boolean)


// const name = 'kashan'
// name = 'ali'
// console.log('name')



// Arithmetic, assignment, comparison, and logical operators
// Operator precedence and associativity
// Using expressions in JavaScript



// Conditional statements (if, else if, else)
// Switch statement
// Working with arrays and objects

// let person = prompt("Please enter your name ");
// console.log('person == ', person)
// alert(person)

// let person2 = prompt("Please enter your name ", 'kashan');
// console.log('abvsff == ', person2)
// alert(person2)

// if (person == "-") {
//     console.log('person === ', person);
// }


//          Switch statement
// switch cases use strict comparison (===)
// console.log(typeof day);
// switch (+day) {
//     case 6:
//         console.log('Today is Saterday');
//         break;

//     case 0:
//         console.log('Today is Sunday');
//         break;

//     default:
//         console.log('Looking for weekend');
// }







// var name = 'kashan'

//              Object
// An object is a collection of properties, 
// and a property is an association between a name (or key) and a value.

// var student = {name: 'kashan', roll_no: 24}
// student.name2 = 'abc';
// delete student.name
// console.log(student);


// Shallow copy
// A shallow copy can be achieved using the spread operator (â€¦) or using Object.assign():

// const obj = { name: 'Version 1', additionalInfo: { version: 1 } };

// const shallowCopy1 = { ...obj };
// const shallowCopy2 = Object.assign({}, obj);

// shallowCopy1.name = 'Version 2';
// shallowCopy1.additionalInfo.version = 2;

// shallowCopy2.name = 'Version 2';
// shallowCopy2.additionalInfo.version = 2;

// console.log(obj)
// console.log(shallowCopy1);
// console.log(shallowCopy2); 


// Deep copy
// A deep copy can be achieved using JSON.parse() + JSON.stringify():

// const obj = { name: 'Version 1', additionalInfo: { version: 1 } };

// const deepCopy = JSON.parse(JSON.stringify(obj));

// deepCopy.name = 'Version 2';
// deepCopy.additionalInfo.version = 2;

// console.log(obj);
// console.log(deepCopy);




//              Array
// Arrays are used to store multiple values in a single variable. 

// var arrr = ['blue','black','white'];
// var abc = arrr.toString();
// console.log('abc == ', abc)

// var arrr2 = ['red'];
// var abc = arrr.concate(arrr2);
// console.log('abc == ', abc)








// var array = ['blue','black','white', 'green'];
// array[2] = 'red'

// console.log(array.includes('red'));

// var ind = array.indexOf('white');
// console.log('index == ', ind);

// var string = 'pakistan,korea';

// var newArray = string.split(',');

// console.log(newArray);



// array.splice(index, deleteCount, el...eln)

// var newArray = array.slice(0,3)      // Delete
// array.splice(2,0, 'red', 'yellow');    // update or replace
// array.splice(1,0, 'red', 'yellow');    // Add

// console.log('array == ', array);
// console.log('newArray == ', newArray);





// Ternary operator
// let marks = 40;

// check the condition
// let result = (marks >= 40) ? 'pass' : 'fail';

// console.log('result ', result);



// var marks = 1;

// while (marks < 10) {
//     console.log('marks ', marks);
//     marks++;
// }



// let i = 1;
// const n = 1;

// do {
//     console.log(i);
// }
//     // i++;
// } while(i <= n);



// for (initialization; condition; expression) {
//     // execute code block
// }


// let a = [2,4,6,9,5]
// let max =0;
// for(let i = 0; i<a.length; i++){
//     if(a[i]>max){
//         max = a[i]
//     }
// }

// console.log(max);
// for (var step = 0; step < 5; step++) {
//     // Runs 5 times, with values of step 0 through 4.
//     console.log("Walking each one step", step);
// }

// var country = prompt();

// console.log(country)



// var array = ['blue','black','white', 'green'];

// var newArr = []

// for (var i = 0; i < array.length; i++) {
//     newArr.push(array[i]);
// }





// Defining and calling functions
// Parameters and return values










// var a = [2,4,6,9]

// function abc (a) {
//     var val = a[0]

//     for (var i = 1; i < a.length; i++) {
//         if(a[5] > val) {
//             val = a[i]
//         }
//     }

//     // console.log(a);
//     return val
// }


// var result = abc(a);

// console.log(result);


// function expression

// var fun_name = (width, height) => {
//     var c = width * height
//     console.log('c == ', c);
//     return (width, height)
//     // return height
// }
// console.log(fun_name(3.4))
// var result = fun_name(3, 4);

// console.log('result == ', result);

// Different ways to declare a function
// let a = 2;
// let b = 3;

// function sum(x, y) {
//     return x + y;
// }

// const sumExpression = function (x, y) {
//     return x + y;
// }

// arrowSum = (x, y) => x + y;

// console.log(sum(a, b));
// console.log(sumExpression(a, b));
// console.log(arrowSum(a, b));




// Iterating over arrays (for loop, forEach, map, filter)

/* forEach method */
// let myArray1 = [1, 2, 3, 4];
// let newArray1 = myArray1.forEach((element, index) => {
//     //    myArray1[index] = element * element;
//     return element * element;
// })
// console.log(myArray1);
// console.log('newArray = ', newArray1);

/* map method */
// let myArray2 = [1, 2, 3, 4];
// let newArray2 = myArray2.map((element, index) => {
//     // myArray2[index] = element * element;
//     return element * element;
// })
// console.log(myArray2);
// console.log('newArray = ', newArray2);


// /* forEach method */
// let myArray = [1, 2, 3, 4];

// const returnValue = myArray.forEach((element) => {
//     return element * element;
// });
// console.log(returnValue);


// /* map method */
// let myArray = [1, 2, 3, 4];

// const returnValue = myArray.map((element) => {
//     return element * element;
// })
// console.log(returnValue);




/* filter method */
// var numbers = [1, 3, 6, 8, 11];
// var greaterThanSeven = numbers.filter((number) => {
//     return number > 11;
// });

// console.log(greaterThanSeven);





   /* Object Literal */

//    const person = {
//     name: 'John Doe',
//     age: 30,
//     address: '123 Main Street'
//   };

//   person.name = 'hello'

//   console.log(person.name)



// pass by value
// var num = 10;
// function updateNum(value) {
//   return value = 20;
// }
// console.log(updateNum(num));

// console.log(num);


// pass by reference
// let obj = { name: 'John' };
// function updateName(objRef) {
//   objRef.name = 'Alice';
// }
// updateName(obj);
// console.log(obj.name);


// let obj = { name: 'John' };

// function updateObject(objRef) {
//   objRef = { name: 'Alice' };
// }

// updateObject(obj);

// console.log(obj.name);


// Deep copy
// let a = 10;
// a = 20;
// let b = a;
// console.log(b)
// console.log(a)


// Shallow copy
// let a = {name : 'sami'};
// let b = a;
// a.name = 'kashan'
// console.log(b)
// console.log(a)


// Deep copy
// let a = {name : 'sami'};
// let b = {...a};
// a.name = 'kashan';
// console.log(b)
// console.log(a)


// Use of spread operator ...

// let obj_1 = { name: "Ali", age: 20 };
// let obj_2 = {...obj_1};
// obj_2.age = 50;
// console.log("obj_1", obj_1);
// console.log("obj_2", obj_2);


// object method 

// let person = {
//     firstName: 'John',
//     lastName: 'Doe',
//     greet : () => { 
//         console.log('Hello!');
//         return person.lastName;
//     }
// }

// // console.log(person.firstName);
// console.log(person.greet(), person.firstName);



// function closure
// Lexical scoping in JavaScript

// function init() {
//     const name = "Mozilla"; // name is a local variable created by init

//     function displayName() {
//         // displayName() is the inner function, that forms the closure
//         console.log(name); // use variable declared in the parent function
//     }

//     displayName();
//     console.log("below");
// }

// init();


// object methods
// Initialize an object
// const employees = {
// 	boss: 'Michael',
// 	secretary: 'Pam',
// 	sales: 'Jim',
// 	accountant: 'Oscar'
// };


// // Get the keys of the object
// const entries = Object.entries(employees);

// console.log(entries);



// Merging objects

// Initialize an object
// const obj = {
//     firstName: 'Philip',
//     lastName: 'Fry'
// };

// // Initialize another object
// const details = {
//     job: 'Delivery Boy',
//     employer: 'Planet Express'
// };

// // Merge the object with the spread operator
// const character = {...obj, ...details}

// console.log(character);



// String manipulation methods
// String template literals

// var name = 'kashan';
// var value = `My Name is ${name}`

// https://www.programiz.com/javascript/library/string/tolowercase

// var a = 99999999999;
// console.log(a.length);






